{"version":3,"sources":["logo.svg","TabPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","useStyles","makeStyles","root","maxWidth","projcard","projcardmedia","height","App","classes","theme","createMuiTheme","palette","type","primary","teal","seconday","pink","React","useState","tabValue","setTabValue","handleChange","event","newValue","RenderTab_Projects","Card","className","CardActionArea","CardMedia","component","image","title","CardContent","gutterBottom","variant","color","CardActions","Button","size","RenderTab_Education","RenderTab_Work","RenderTab_Contact","ThemeProvider","Paper","square","style","elevation","Tabs","onChange","indicatorColor","textColor","aria-label","Tab","label","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,uPCO5B,SAASC,EAASC,GAAQ,IAC/BC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADG,YACOJ,EADP,8BAGtC,OACE,uCACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,uBAAkBJ,GACpBK,kBAAA,kBAA4BL,IACxBC,GAEHF,IAAUC,GACT,kBAACM,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACC,EAAA,EAAD,KAAaV,K,wFCKjBW,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,SAAU,CACRD,SAAU,KAEZE,cAAe,CACbC,OAAQ,OAsHGC,MAlHf,WACE,IAAMC,EAAUR,IAEVS,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,QAASC,IACTC,SAAUC,OAPD,EAWmBC,IAAMC,SAAS,GAXlC,mBAWNC,EAXM,KAWIC,EAXJ,KAaPC,EAAe,SAACC,EAAOC,GAC3BH,EAAYG,IA2CRC,EAAqB,WACzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,UAAWlB,EAAQJ,UACvB,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,SACVH,UAAWlB,EAAQH,cACnByB,MAAM,4CACNC,MAAM,gBAER,kBAACC,EAAA,EAAD,KACE,kBAACjC,EAAA,EAAD,CAAYkC,cAAY,EAACC,QAAQ,KAAKL,UAAU,MAAhD,eAGA,kBAAC9B,EAAA,EAAD,CAAYmC,QAAQ,QAAQC,MAAM,gBAAgBN,UAAU,KAA5D,4CAKJ,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,SAGA,kBAACE,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,gBAMJ,kBAACV,EAAA,EAAD,CAAMC,UAAWlB,EAAQJ,aAKzBmC,EAAsB,WAC1B,OAAO,6DAGHC,EAAiB,WACrB,OAAO,+DAGHC,EAAoB,WACxB,OAAO,uDAGT,OACE,kBAACC,EAAA,EAAD,CAAejC,MAAOA,GACpB,kBAACkC,EAAA,EAAD,CAAOC,QAAM,EAACC,MAAO,CAAEvC,OAAQ,UAvF/B,yBAAKoB,UAAU,cACb,yBAAKA,UAAU,eAwFf,kBAACiB,EAAA,EAAD,CAAOG,UAAW,GAjFpB,yBAAKpB,UAAU,OACb,kBAACqB,EAAA,EAAD,CACEzD,MAAO6B,EACP6B,SAAU3B,EACVa,QAAQ,YACRe,eAAe,UACfC,UAAU,UACVC,aAAW,qBAEX,kBAACC,EAAA,EAAD,CAAKC,MAAM,WAAWC,KAAM,kBAAC,IAAD,MAAiBH,aAAW,aACxD,kBAACC,EAAA,EAAD,CAAKC,MAAM,YAAYC,KAAM,kBAAC,IAAD,MAAgBH,aAAW,aACxD,kBAACC,EAAA,EAAD,CAAKC,MAAM,OAAOC,KAAM,kBAAC,IAAD,MAAcH,aAAW,aACjD,kBAACC,EAAA,EAAD,CAAKC,MAAM,UAAUC,KAAM,kBAAC,IAAD,MAAiBH,aAAW,cAEzD,kBAAChE,EAAD,CAAUG,MAAO6B,EAAU5B,MAAO,GAC/BiC,KAEH,kBAACrC,EAAD,CAAUG,MAAO6B,EAAU5B,MAAO,GAC/BgD,KAEH,kBAACpD,EAAD,CAAUG,MAAO6B,EAAU5B,MAAO,GAC/BiD,KAEH,kBAACrD,EAAD,CAAUG,MAAO6B,EAAU5B,MAAO,GAC/BkD,UC5ESc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46c474ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nexport default function TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`nav-tabpanel-${index}`}\r\n      aria-labelledby={`nav-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `nav-tab-${index}`,\r\n    'aria-controls': `nav-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction LinkTab(props) {\r\n  return (\r\n    <Tab\r\n      component=\"a\"\r\n      onClick={(event) => {\r\n        event.preventDefault();\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Grid, Typography, Paper, makeStyles } from \"@material-ui/core\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport { Tabs, Tab } from \"@material-ui/core\";\nimport {\n  Card,\n  CardContent,\n  CardMedia,\n  CardActionArea,\n  CardActions,\n} from \"@material-ui/core\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport TabPanel from \"./TabPanel\";\n\n//colors\nimport { teal, pink } from \"@material-ui/core/colors\";\n\n//icons\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport ProjectIcon from \"@material-ui/icons/Code\";\nimport ContactIcon from \"@material-ui/icons/ContactMail\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  projcard: {\n    maxWidth: 345,\n  },\n  projcardmedia: {\n    height: 220,\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  const theme = createMuiTheme({\n    palette: {\n      type: \"dark\",\n      primary: teal,\n      seconday: pink,\n    },\n  });\n\n  const [tabValue, setTabValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const RenderHeader = () => {\n    return (\n      <div className=\"hero-image\">\n        <div className=\"hero-text\"></div>\n      </div>\n    );\n  };\n\n  const RenderTabs = () => {\n    return (\n      <div className=\"App\">\n        <Tabs\n          value={tabValue}\n          onChange={handleChange}\n          variant=\"fullWidth\"\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          aria-label=\"icon tabs example\"\n        >\n          <Tab label=\"Projects\" icon={<ProjectIcon />} aria-label=\"Projects\" />\n          <Tab label=\"Education\" icon={<SchoolIcon />} aria-label=\"Projects\" />\n          <Tab label=\"Work\" icon={<WorkIcon />} aria-label=\"Projects\" />\n          <Tab label=\"Contact\" icon={<ContactIcon />} aria-label=\"Projects\" />\n        </Tabs>\n        <TabPanel value={tabValue} index={0}>\n          {RenderTab_Projects()}\n        </TabPanel>\n        <TabPanel value={tabValue} index={1}>\n          {RenderTab_Education()}\n        </TabPanel>\n        <TabPanel value={tabValue} index={2}>\n          {RenderTab_Work()}\n        </TabPanel>\n        <TabPanel value={tabValue} index={3}>\n          {RenderTab_Contact()}\n        </TabPanel>\n      </div>\n    );\n  };\n\n  const RenderTab_Projects = () => {\n    return (\n      <div>\n        <Card className={classes.projcard}>\n          <CardActionArea>\n            <CardMedia\n              component=\"iframe\"\n              className={classes.projcardmedia}\n              image=\"https://www.youtube.com/embed/IX0dHolltBo\"\n              title=\"Space Arena\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Space Arena\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Mobile game built using Unity3D and C#\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              Share\n            </Button>\n            <Button size=\"small\" color=\"primary\">\n              Learn More\n            </Button>\n          </CardActions>\n        </Card>\n      \n        <Card className={classes.projcard}></Card>\n      </div>\n    );\n  };\n\n  const RenderTab_Education = () => {\n    return <div>These are my qualifications</div>;\n  };\n\n  const RenderTab_Work = () => {\n    return <div>These are my work experiences</div>;\n  };\n\n  const RenderTab_Contact = () => {\n    return <div>These are my contacts</div>;\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper square style={{ height: \"100vh\" }}>\n        {RenderHeader()}\n        <Paper elevation={3}>{RenderTabs()}</Paper>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}